using System.Reflection;
using System;
using System.IO;
using System.Linq;
using CotorraNode.Common.Config;
using Microsoft.Extensions.PlatformAbstractions;
using Cotorra.Schema;
using CotorraNode.Common.Base.Schema;

namespace Cotorra.Client
{
    //------------------------------------------------------------------------------
    // <auto-generated>
    //    Este código se generó a partir de una plantilla.
    // No se sobreescribirán los cambios manuales si se regenera el código
    // </auto-generated>
    //------------------------------------------------------------------------------


    //Factory for client adapters
    /// <summary>
    /// 
    /// </summary>
    public class ClientAdapterFactory
    {

        /// <summary>
        /// Gets the instance.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="clientType">Type of the client.</param>
        /// <param name="authorizationHeader">The authorization header.</param>
        /// <param name="clientadapter">The clientadapter.</param>
        /// <returns></returns>
        public static IClient<T> GetInstance<T>(string authorizationHeader, IValidator<T> validator, ClientConfiguration.ClientAdapter clientadapter = ClientConfiguration.ClientAdapter.Proxy)
        where T : BaseEntity
        {
            return GetInstanceAsembly<T>(authorizationHeader, config: null, clientadapter: clientadapter,
                validator: validator);
        }

        public static IClient<T> GetInstance<T>(string authorizationHeader, ClientConfiguration.ClientAdapter clientadapter = ClientConfiguration.ClientAdapter.Proxy)
        where T : BaseEntity
        {
            return GetInstanceAsembly<T>(authorizationHeader, config: null, clientadapter: clientadapter);
        }

        public static IClient<T> GetInstance<T>(string authorizationHeader, IConfigProvider configProvider, ClientConfiguration.ClientAdapter clientadapter = ClientConfiguration.ClientAdapter.Proxy)
        where T : BaseEntity
        {
            return GetInstanceAsembly<T>(authorizationHeader, config: configProvider, clientadapter: clientadapter);
        }

        /// <summary>
        /// Gets the instance asembly.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="clientType">Type of the client.</param>
        /// <param name="authorizationHeader">The authorization header.</param>
        /// <param name="config">The configuration.</param>
        /// <param name="clientadapter">The clientadapter.</param>
        /// <returns></returns>
        /// <exception cref="InvalidOperationException">Client adapter not found</exception>

        private static IClient<T> GetInstanceAsembly<T>(string authorizationHeader,
            IValidator<T> validator,
            IConfigProvider config = null,
            ClientConfiguration.ClientAdapter clientadapter = ClientConfiguration.ClientAdapter.Proxy)
            where T : BaseEntity
        {
            Assembly assembly = null;
            var variable = PlatformServices.Default.Application.ApplicationBasePath;
            Type type = null;
            try
            {
                if (clientadapter == ClientConfiguration.ClientAdapter.Proxy)
                {
                    assembly = Assembly.LoadFrom(variable + "Cotorra.ClientProxy.dll");
                }
                else if (clientadapter == ClientConfiguration.ClientAdapter.Local)
                {
                    assembly = Assembly.LoadFrom(variable + "Cotorra.ClientLocal.dll");
                }
                else if (clientadapter == ClientConfiguration.ClientAdapter.Internal)
                {
                    assembly = Assembly.LoadFrom(variable + "Cotorra.ClientLocal.dll");
                }
                if (assembly != null)
                {
                    string clientName = String.Empty;
                    if (clientadapter == ClientConfiguration.ClientAdapter.Local || clientadapter == ClientConfiguration.ClientAdapter.Internal)
                    {
                        clientName = "Cotorra.ClientLocal.ClientLocal`1";
                    }
                    else
                    {
                        clientName = "Cotorra.ClientProxy.ClientProxy`1";                        
                    }
                    type = assembly.DefinedTypes.FirstOrDefault(p => p.FullName.Contains(clientName)).UnderlyingSystemType;

                }
                else
                {
                    throw new Exception("assembly is null");
                }

                if (config != null)
                {
                    var makeme = type.MakeGenericType(typeof(T));
                    return Activator.CreateInstance(makeme, authorizationHeader, validator, config) as IClient<T>;
                }
                else
                {
                    var makeme = type.MakeGenericType(typeof(T));
                    return Activator.CreateInstance(makeme, authorizationHeader, validator) as IClient<T>;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }

        private static IClient<T> GetInstanceAsembly<T>(string authorizationHeader,
            IConfigProvider config = null,
            ClientConfiguration.ClientAdapter clientadapter = ClientConfiguration.ClientAdapter.Proxy)
            where T : BaseEntity
        {
            Assembly assembly = null;
            var variable = String.Empty;

//#if __ANDROID__
            variable = System.Reflection.Assembly.GetExecutingAssembly().Location;
//#else 
            variable = PlatformServices.Default.Application.ApplicationBasePath;
//#endif
            Type type = null;
            try
            {
                if (clientadapter == ClientConfiguration.ClientAdapter.Proxy)
                {
                    var file = $"{variable}Cotorra.ClientProxy.dll";
                    if (File.Exists(file))
                    {
                        assembly = Assembly.LoadFrom(file);
                    }                    
                }
                else if (clientadapter == ClientConfiguration.ClientAdapter.Local)
                {
                    assembly = Assembly.LoadFrom(variable + "Cotorra.ClientLocal.dll");
                }
                else if (clientadapter == ClientConfiguration.ClientAdapter.Internal)
                {
                    assembly = Assembly.LoadFrom(variable + "Cotorra.ClientLocal.dll");
                }
                if (assembly != null)
                {
                    string clientName = String.Empty;
                    if (clientadapter == ClientConfiguration.ClientAdapter.Local || clientadapter == ClientConfiguration.ClientAdapter.Internal)
                    {
                        clientName = "Cotorra.ClientLocal.ClientLocal`1";
                    }
                    else
                    {
                        clientName = "Cotorra.ClientProxy.ClientProxy`1";
                    }
                    type = assembly.DefinedTypes.FirstOrDefault(p => p.FullName.Contains(clientName)).UnderlyingSystemType;

                }
                else
                {
                    throw new Exception("assembly is null");
                }

                if (config != null)
                {
                    var makeme = type.MakeGenericType(typeof(T));
                    return Activator.CreateInstance(makeme, authorizationHeader, config) as IClient<T>;
                }
                else
                {
                    var makeme = type.MakeGenericType(typeof(T));
                    return Activator.CreateInstance(makeme, authorizationHeader) as IClient<T>;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }
    
    }
}
